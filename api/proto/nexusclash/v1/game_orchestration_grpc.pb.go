// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: nexusclash/v1/game_orchestration.proto

package nexusclashv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameOrchestrationServiceClient is the client API for GameOrchestrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameOrchestrationServiceClient interface {
	// GetStatus returns the current status of the orchestration service.
	GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
}

type gameOrchestrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameOrchestrationServiceClient(cc grpc.ClientConnInterface) GameOrchestrationServiceClient {
	return &gameOrchestrationServiceClient{cc}
}

func (c *gameOrchestrationServiceClient) GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/nexusclash.v1.GameOrchestrationService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameOrchestrationServiceServer is the server API for GameOrchestrationService service.
// All implementations must embed UnimplementedGameOrchestrationServiceServer
// for forward compatibility
type GameOrchestrationServiceServer interface {
	// GetStatus returns the current status of the orchestration service.
	GetStatus(context.Context, *emptypb.Empty) (*StatusResponse, error)
	mustEmbedUnimplementedGameOrchestrationServiceServer()
}

// UnimplementedGameOrchestrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameOrchestrationServiceServer struct {
}

func (UnimplementedGameOrchestrationServiceServer) GetStatus(context.Context, *emptypb.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedGameOrchestrationServiceServer) mustEmbedUnimplementedGameOrchestrationServiceServer() {
}

// UnsafeGameOrchestrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameOrchestrationServiceServer will
// result in compilation errors.
type UnsafeGameOrchestrationServiceServer interface {
	mustEmbedUnimplementedGameOrchestrationServiceServer()
}

func RegisterGameOrchestrationServiceServer(s grpc.ServiceRegistrar, srv GameOrchestrationServiceServer) {
	s.RegisterService(&GameOrchestrationService_ServiceDesc, srv)
}

func _GameOrchestrationService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameOrchestrationServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nexusclash.v1.GameOrchestrationService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameOrchestrationServiceServer).GetStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GameOrchestrationService_ServiceDesc is the grpc.ServiceDesc for GameOrchestrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameOrchestrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nexusclash.v1.GameOrchestrationService",
	HandlerType: (*GameOrchestrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _GameOrchestrationService_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nexusclash/v1/game_orchestration.proto",
}
